;; ==========================================================
;; Class accessors
;; Bigloo (4.6a)
;; Inria -- Sophia Antipolis     Fri Jun 14 12:43:15 CEST 2024 
;; (bigloo -classgen BackEnd/cvm.scm)
;; ==========================================================

;; The directives
(directives

;; cvm
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline cvm?::bool ::obj)
    (cvm-nil::cvm)
    (inline cvm-typed-funcall::bool ::cvm)
    (inline cvm-typed-funcall-set! ::cvm ::bool)
    (inline cvm-type-check::bool ::cvm)
    (inline cvm-type-check-set! ::cvm ::bool)
    (inline cvm-bound-check::bool ::cvm)
    (inline cvm-bound-check-set! ::cvm ::bool)
    (inline cvm-pregisters::pair-nil ::cvm)
    (inline cvm-pregisters-set! ::cvm ::pair-nil)
    (inline cvm-registers::pair-nil ::cvm)
    (inline cvm-registers-set! ::cvm ::pair-nil)
    (inline cvm-require-tailc::bool ::cvm)
    (inline cvm-require-tailc-set! ::cvm ::bool)
    (inline cvm-tvector-descr-support::bool ::cvm)
    (inline cvm-tvector-descr-support-set! ::cvm ::bool)
    (inline cvm-pragma-support::bool ::cvm)
    (inline cvm-pragma-support-set! ::cvm ::bool)
    (inline cvm-debug-support::pair-nil ::cvm)
    (inline cvm-debug-support-set! ::cvm ::pair-nil)
    (inline cvm-foreign-clause-support::pair-nil ::cvm)
    (inline cvm-foreign-clause-support-set! ::cvm ::pair-nil)
    (inline cvm-trace-support::bool ::cvm)
    (inline cvm-trace-support-set! ::cvm ::bool)
    (inline cvm-typed-eq::bool ::cvm)
    (inline cvm-typed-eq-set! ::cvm ::bool)
    (inline cvm-foreign-closure::bool ::cvm)
    (inline cvm-foreign-closure-set! ::cvm ::bool)
    (inline cvm-remove-empty-let::bool ::cvm)
    (inline cvm-remove-empty-let-set! ::cvm ::bool)
    (inline cvm-effect+::bool ::cvm)
    (inline cvm-effect+-set! ::cvm ::bool)
    (inline cvm-qualified-types::bool ::cvm)
    (inline cvm-qualified-types-set! ::cvm ::bool)
    (inline cvm-callcc::bool ::cvm)
    (inline cvm-callcc-set! ::cvm ::bool)
    (inline cvm-heap-compatible::symbol ::cvm)
    (inline cvm-heap-compatible-set! ::cvm ::symbol)
    (inline cvm-heap-suffix::bstring ::cvm)
    (inline cvm-heap-suffix-set! ::cvm ::bstring)
    (inline cvm-typed::bool ::cvm)
    (inline cvm-typed-set! ::cvm ::bool)
    (inline cvm-types::obj ::cvm)
    (inline cvm-types-set! ::cvm ::obj)
    (inline cvm-functions::obj ::cvm)
    (inline cvm-functions-set! ::cvm ::obj)
    (inline cvm-variables::obj ::cvm)
    (inline cvm-variables-set! ::cvm ::obj)
    (inline cvm-extern-types::obj ::cvm)
    (inline cvm-extern-types-set! ::cvm ::obj)
    (inline cvm-extern-functions::obj ::cvm)
    (inline cvm-extern-functions-set! ::cvm ::obj)
    (inline cvm-extern-variables::obj ::cvm)
    (inline cvm-extern-variables-set! ::cvm ::obj)
    (inline cvm-name::bstring ::cvm)
    (inline cvm-name-set! ::cvm ::bstring)
    (inline cvm-srfi0::symbol ::cvm)
    (inline cvm-srfi0-set! ::cvm ::symbol)
    (inline cvm-language::symbol ::cvm)
    (inline cvm-language-set! ::cvm ::symbol))))

;; sawc
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sawc::sawc language1210::symbol srfi01211::symbol name1212::bstring extern-variables1213::obj extern-functions1214::obj extern-types1215::obj variables1216::obj functions1217::obj types1218::obj typed1219::bool heap-suffix1220::bstring heap-compatible1221::symbol callcc1222::bool qualified-types1223::bool effect+1224::bool remove-empty-let1225::bool foreign-closure1226::bool typed-eq1227::bool trace-support1228::bool foreign-clause-suppo1229::pair-nil debug-support1230::pair-nil pragma-support1231::bool tvector-descr-suppor1232::bool require-tailc1233::bool registers1234::pair-nil pregisters1235::pair-nil bound-check1236::bool type-check1237::bool typed-funcall1238::bool)
    (inline sawc?::bool ::obj)
    (sawc-nil::sawc)
    (inline sawc-typed-funcall::bool ::sawc)
    (inline sawc-typed-funcall-set! ::sawc ::bool)
    (inline sawc-type-check::bool ::sawc)
    (inline sawc-type-check-set! ::sawc ::bool)
    (inline sawc-bound-check::bool ::sawc)
    (inline sawc-bound-check-set! ::sawc ::bool)
    (inline sawc-pregisters::pair-nil ::sawc)
    (inline sawc-pregisters-set! ::sawc ::pair-nil)
    (inline sawc-registers::pair-nil ::sawc)
    (inline sawc-registers-set! ::sawc ::pair-nil)
    (inline sawc-require-tailc::bool ::sawc)
    (inline sawc-require-tailc-set! ::sawc ::bool)
    (inline sawc-tvector-descr-support::bool ::sawc)
    (inline sawc-tvector-descr-support-set! ::sawc ::bool)
    (inline sawc-pragma-support::bool ::sawc)
    (inline sawc-pragma-support-set! ::sawc ::bool)
    (inline sawc-debug-support::pair-nil ::sawc)
    (inline sawc-debug-support-set! ::sawc ::pair-nil)
    (inline sawc-foreign-clause-support::pair-nil ::sawc)
    (inline sawc-foreign-clause-support-set! ::sawc ::pair-nil)
    (inline sawc-trace-support::bool ::sawc)
    (inline sawc-trace-support-set! ::sawc ::bool)
    (inline sawc-typed-eq::bool ::sawc)
    (inline sawc-typed-eq-set! ::sawc ::bool)
    (inline sawc-foreign-closure::bool ::sawc)
    (inline sawc-foreign-closure-set! ::sawc ::bool)
    (inline sawc-remove-empty-let::bool ::sawc)
    (inline sawc-remove-empty-let-set! ::sawc ::bool)
    (inline sawc-effect+::bool ::sawc)
    (inline sawc-effect+-set! ::sawc ::bool)
    (inline sawc-qualified-types::bool ::sawc)
    (inline sawc-qualified-types-set! ::sawc ::bool)
    (inline sawc-callcc::bool ::sawc)
    (inline sawc-callcc-set! ::sawc ::bool)
    (inline sawc-heap-compatible::symbol ::sawc)
    (inline sawc-heap-compatible-set! ::sawc ::symbol)
    (inline sawc-heap-suffix::bstring ::sawc)
    (inline sawc-heap-suffix-set! ::sawc ::bstring)
    (inline sawc-typed::bool ::sawc)
    (inline sawc-typed-set! ::sawc ::bool)
    (inline sawc-types::obj ::sawc)
    (inline sawc-types-set! ::sawc ::obj)
    (inline sawc-functions::obj ::sawc)
    (inline sawc-functions-set! ::sawc ::obj)
    (inline sawc-variables::obj ::sawc)
    (inline sawc-variables-set! ::sawc ::obj)
    (inline sawc-extern-types::obj ::sawc)
    (inline sawc-extern-types-set! ::sawc ::obj)
    (inline sawc-extern-functions::obj ::sawc)
    (inline sawc-extern-functions-set! ::sawc ::obj)
    (inline sawc-extern-variables::obj ::sawc)
    (inline sawc-extern-variables-set! ::sawc ::obj)
    (inline sawc-name::bstring ::sawc)
    (inline sawc-name-set! ::sawc ::bstring)
    (inline sawc-srfi0::symbol ::sawc)
    (inline sawc-srfi0-set! ::sawc ::symbol)
    (inline sawc-language::symbol ::sawc)
    (inline sawc-language-set! ::sawc ::symbol))))

;; wasm
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-wasm::wasm language1180::symbol srfi01181::symbol name1182::bstring extern-variables1183::obj extern-functions1184::obj extern-types1185::obj variables1186::obj functions1187::obj types1188::obj typed1189::bool heap-suffix1190::bstring heap-compatible1191::symbol callcc1192::bool qualified-types1193::bool effect+1194::bool remove-empty-let1195::bool foreign-closure1196::bool typed-eq1197::bool trace-support1198::bool foreign-clause-suppo1199::pair-nil debug-support1200::pair-nil pragma-support1201::bool tvector-descr-suppor1202::bool require-tailc1203::bool registers1204::pair-nil pregisters1205::pair-nil bound-check1206::bool type-check1207::bool typed-funcall1208::bool)
    (inline wasm?::bool ::obj)
    (wasm-nil::wasm)
    (inline wasm-typed-funcall::bool ::wasm)
    (inline wasm-typed-funcall-set! ::wasm ::bool)
    (inline wasm-type-check::bool ::wasm)
    (inline wasm-type-check-set! ::wasm ::bool)
    (inline wasm-bound-check::bool ::wasm)
    (inline wasm-bound-check-set! ::wasm ::bool)
    (inline wasm-pregisters::pair-nil ::wasm)
    (inline wasm-pregisters-set! ::wasm ::pair-nil)
    (inline wasm-registers::pair-nil ::wasm)
    (inline wasm-registers-set! ::wasm ::pair-nil)
    (inline wasm-require-tailc::bool ::wasm)
    (inline wasm-require-tailc-set! ::wasm ::bool)
    (inline wasm-tvector-descr-support::bool ::wasm)
    (inline wasm-tvector-descr-support-set! ::wasm ::bool)
    (inline wasm-pragma-support::bool ::wasm)
    (inline wasm-pragma-support-set! ::wasm ::bool)
    (inline wasm-debug-support::pair-nil ::wasm)
    (inline wasm-debug-support-set! ::wasm ::pair-nil)
    (inline wasm-foreign-clause-support::pair-nil ::wasm)
    (inline wasm-foreign-clause-support-set! ::wasm ::pair-nil)
    (inline wasm-trace-support::bool ::wasm)
    (inline wasm-trace-support-set! ::wasm ::bool)
    (inline wasm-typed-eq::bool ::wasm)
    (inline wasm-typed-eq-set! ::wasm ::bool)
    (inline wasm-foreign-closure::bool ::wasm)
    (inline wasm-foreign-closure-set! ::wasm ::bool)
    (inline wasm-remove-empty-let::bool ::wasm)
    (inline wasm-remove-empty-let-set! ::wasm ::bool)
    (inline wasm-effect+::bool ::wasm)
    (inline wasm-effect+-set! ::wasm ::bool)
    (inline wasm-qualified-types::bool ::wasm)
    (inline wasm-qualified-types-set! ::wasm ::bool)
    (inline wasm-callcc::bool ::wasm)
    (inline wasm-callcc-set! ::wasm ::bool)
    (inline wasm-heap-compatible::symbol ::wasm)
    (inline wasm-heap-compatible-set! ::wasm ::symbol)
    (inline wasm-heap-suffix::bstring ::wasm)
    (inline wasm-heap-suffix-set! ::wasm ::bstring)
    (inline wasm-typed::bool ::wasm)
    (inline wasm-typed-set! ::wasm ::bool)
    (inline wasm-types::obj ::wasm)
    (inline wasm-types-set! ::wasm ::obj)
    (inline wasm-functions::obj ::wasm)
    (inline wasm-functions-set! ::wasm ::obj)
    (inline wasm-variables::obj ::wasm)
    (inline wasm-variables-set! ::wasm ::obj)
    (inline wasm-extern-types::obj ::wasm)
    (inline wasm-extern-types-set! ::wasm ::obj)
    (inline wasm-extern-functions::obj ::wasm)
    (inline wasm-extern-functions-set! ::wasm ::obj)
    (inline wasm-extern-variables::obj ::wasm)
    (inline wasm-extern-variables-set! ::wasm ::obj)
    (inline wasm-name::bstring ::wasm)
    (inline wasm-name-set! ::wasm ::bstring)
    (inline wasm-srfi0::symbol ::wasm)
    (inline wasm-srfi0-set! ::wasm ::symbol)
    (inline wasm-language::symbol ::wasm)
    (inline wasm-language-set! ::wasm ::symbol))))

;; cgen
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cgen::cgen language1150::symbol srfi01151::symbol name1152::bstring extern-variables1153::obj extern-functions1154::obj extern-types1155::obj variables1156::obj functions1157::obj types1158::obj typed1159::bool heap-suffix1160::bstring heap-compatible1161::symbol callcc1162::bool qualified-types1163::bool effect+1164::bool remove-empty-let1165::bool foreign-closure1166::bool typed-eq1167::bool trace-support1168::bool foreign-clause-suppo1169::pair-nil debug-support1170::pair-nil pragma-support1171::bool tvector-descr-suppor1172::bool require-tailc1173::bool registers1174::pair-nil pregisters1175::pair-nil bound-check1176::bool type-check1177::bool typed-funcall1178::bool)
    (inline cgen?::bool ::obj)
    (cgen-nil::cgen)
    (inline cgen-typed-funcall::bool ::cgen)
    (inline cgen-typed-funcall-set! ::cgen ::bool)
    (inline cgen-type-check::bool ::cgen)
    (inline cgen-type-check-set! ::cgen ::bool)
    (inline cgen-bound-check::bool ::cgen)
    (inline cgen-bound-check-set! ::cgen ::bool)
    (inline cgen-pregisters::pair-nil ::cgen)
    (inline cgen-pregisters-set! ::cgen ::pair-nil)
    (inline cgen-registers::pair-nil ::cgen)
    (inline cgen-registers-set! ::cgen ::pair-nil)
    (inline cgen-require-tailc::bool ::cgen)
    (inline cgen-require-tailc-set! ::cgen ::bool)
    (inline cgen-tvector-descr-support::bool ::cgen)
    (inline cgen-tvector-descr-support-set! ::cgen ::bool)
    (inline cgen-pragma-support::bool ::cgen)
    (inline cgen-pragma-support-set! ::cgen ::bool)
    (inline cgen-debug-support::pair-nil ::cgen)
    (inline cgen-debug-support-set! ::cgen ::pair-nil)
    (inline cgen-foreign-clause-support::pair-nil ::cgen)
    (inline cgen-foreign-clause-support-set! ::cgen ::pair-nil)
    (inline cgen-trace-support::bool ::cgen)
    (inline cgen-trace-support-set! ::cgen ::bool)
    (inline cgen-typed-eq::bool ::cgen)
    (inline cgen-typed-eq-set! ::cgen ::bool)
    (inline cgen-foreign-closure::bool ::cgen)
    (inline cgen-foreign-closure-set! ::cgen ::bool)
    (inline cgen-remove-empty-let::bool ::cgen)
    (inline cgen-remove-empty-let-set! ::cgen ::bool)
    (inline cgen-effect+::bool ::cgen)
    (inline cgen-effect+-set! ::cgen ::bool)
    (inline cgen-qualified-types::bool ::cgen)
    (inline cgen-qualified-types-set! ::cgen ::bool)
    (inline cgen-callcc::bool ::cgen)
    (inline cgen-callcc-set! ::cgen ::bool)
    (inline cgen-heap-compatible::symbol ::cgen)
    (inline cgen-heap-compatible-set! ::cgen ::symbol)
    (inline cgen-heap-suffix::bstring ::cgen)
    (inline cgen-heap-suffix-set! ::cgen ::bstring)
    (inline cgen-typed::bool ::cgen)
    (inline cgen-typed-set! ::cgen ::bool)
    (inline cgen-types::obj ::cgen)
    (inline cgen-types-set! ::cgen ::obj)
    (inline cgen-functions::obj ::cgen)
    (inline cgen-functions-set! ::cgen ::obj)
    (inline cgen-variables::obj ::cgen)
    (inline cgen-variables-set! ::cgen ::obj)
    (inline cgen-extern-types::obj ::cgen)
    (inline cgen-extern-types-set! ::cgen ::obj)
    (inline cgen-extern-functions::obj ::cgen)
    (inline cgen-extern-functions-set! ::cgen ::obj)
    (inline cgen-extern-variables::obj ::cgen)
    (inline cgen-extern-variables-set! ::cgen ::obj)
    (inline cgen-name::bstring ::cgen)
    (inline cgen-name-set! ::cgen ::bstring)
    (inline cgen-srfi0::symbol ::cgen)
    (inline cgen-srfi0-set! ::cgen ::symbol)
    (inline cgen-language::symbol ::cgen)
    (inline cgen-language-set! ::cgen ::symbol)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; cvm
(define-inline (cvm?::bool obj::obj) ((@ isa? __object) obj (@ cvm backend_cvm)))
(define (cvm-nil::cvm) (class-nil (@ cvm backend_cvm)))
(define-inline (cvm-typed-funcall::bool o::cvm) (-> |#!bigloo_wallow| o typed-funcall))
(define-inline (cvm-typed-funcall-set! o::cvm v::bool) (set! (-> |#!bigloo_wallow| o typed-funcall) v))
(define-inline (cvm-type-check::bool o::cvm) (-> |#!bigloo_wallow| o type-check))
(define-inline (cvm-type-check-set! o::cvm v::bool) (set! (-> |#!bigloo_wallow| o type-check) v))
(define-inline (cvm-bound-check::bool o::cvm) (-> |#!bigloo_wallow| o bound-check))
(define-inline (cvm-bound-check-set! o::cvm v::bool) (set! (-> |#!bigloo_wallow| o bound-check) v))
(define-inline (cvm-pregisters::pair-nil o::cvm) (-> |#!bigloo_wallow| o pregisters))
(define-inline (cvm-pregisters-set! o::cvm v::pair-nil) (set! (-> |#!bigloo_wallow| o pregisters) v))
(define-inline (cvm-registers::pair-nil o::cvm) (-> |#!bigloo_wallow| o registers))
(define-inline (cvm-registers-set! o::cvm v::pair-nil) (set! (-> |#!bigloo_wallow| o registers) v))
(define-inline (cvm-require-tailc::bool o::cvm) (-> |#!bigloo_wallow| o require-tailc))
(define-inline (cvm-require-tailc-set! o::cvm v::bool) (set! (-> |#!bigloo_wallow| o require-tailc) v))
(define-inline (cvm-tvector-descr-support::bool o::cvm) (-> |#!bigloo_wallow| o tvector-descr-support))
(define-inline (cvm-tvector-descr-support-set! o::cvm v::bool) (set! (-> |#!bigloo_wallow| o tvector-descr-support) v))
(define-inline (cvm-pragma-support::bool o::cvm) (-> |#!bigloo_wallow| o pragma-support))
(define-inline (cvm-pragma-support-set! o::cvm v::bool) (set! (-> |#!bigloo_wallow| o pragma-support) v))
(define-inline (cvm-debug-support::pair-nil o::cvm) (-> |#!bigloo_wallow| o debug-support))
(define-inline (cvm-debug-support-set! o::cvm v::pair-nil) (set! (-> |#!bigloo_wallow| o debug-support) v))
(define-inline (cvm-foreign-clause-support::pair-nil o::cvm) (-> |#!bigloo_wallow| o foreign-clause-support))
(define-inline (cvm-foreign-clause-support-set! o::cvm v::pair-nil) (set! (-> |#!bigloo_wallow| o foreign-clause-support) v))
(define-inline (cvm-trace-support::bool o::cvm) (-> |#!bigloo_wallow| o trace-support))
(define-inline (cvm-trace-support-set! o::cvm v::bool) (set! (-> |#!bigloo_wallow| o trace-support) v))
(define-inline (cvm-typed-eq::bool o::cvm) (-> |#!bigloo_wallow| o typed-eq))
(define-inline (cvm-typed-eq-set! o::cvm v::bool) (set! (-> |#!bigloo_wallow| o typed-eq) v))
(define-inline (cvm-foreign-closure::bool o::cvm) (-> |#!bigloo_wallow| o foreign-closure))
(define-inline (cvm-foreign-closure-set! o::cvm v::bool) (set! (-> |#!bigloo_wallow| o foreign-closure) v))
(define-inline (cvm-remove-empty-let::bool o::cvm) (-> |#!bigloo_wallow| o remove-empty-let))
(define-inline (cvm-remove-empty-let-set! o::cvm v::bool) (set! (-> |#!bigloo_wallow| o remove-empty-let) v))
(define-inline (cvm-effect+::bool o::cvm) (-> |#!bigloo_wallow| o effect+))
(define-inline (cvm-effect+-set! o::cvm v::bool) (set! (-> |#!bigloo_wallow| o effect+) v))
(define-inline (cvm-qualified-types::bool o::cvm) (-> |#!bigloo_wallow| o qualified-types))
(define-inline (cvm-qualified-types-set! o::cvm v::bool) (set! (-> |#!bigloo_wallow| o qualified-types) v))
(define-inline (cvm-callcc::bool o::cvm) (-> |#!bigloo_wallow| o callcc))
(define-inline (cvm-callcc-set! o::cvm v::bool) (set! (-> |#!bigloo_wallow| o callcc) v))
(define-inline (cvm-heap-compatible::symbol o::cvm) (-> |#!bigloo_wallow| o heap-compatible))
(define-inline (cvm-heap-compatible-set! o::cvm v::symbol) (set! (-> |#!bigloo_wallow| o heap-compatible) v))
(define-inline (cvm-heap-suffix::bstring o::cvm) (-> |#!bigloo_wallow| o heap-suffix))
(define-inline (cvm-heap-suffix-set! o::cvm v::bstring) (set! (-> |#!bigloo_wallow| o heap-suffix) v))
(define-inline (cvm-typed::bool o::cvm) (-> |#!bigloo_wallow| o typed))
(define-inline (cvm-typed-set! o::cvm v::bool) (set! (-> |#!bigloo_wallow| o typed) v))
(define-inline (cvm-types::obj o::cvm) (-> |#!bigloo_wallow| o types))
(define-inline (cvm-types-set! o::cvm v::obj) (set! (-> |#!bigloo_wallow| o types) v))
(define-inline (cvm-functions::obj o::cvm) (-> |#!bigloo_wallow| o functions))
(define-inline (cvm-functions-set! o::cvm v::obj) (set! (-> |#!bigloo_wallow| o functions) v))
(define-inline (cvm-variables::obj o::cvm) (-> |#!bigloo_wallow| o variables))
(define-inline (cvm-variables-set! o::cvm v::obj) (set! (-> |#!bigloo_wallow| o variables) v))
(define-inline (cvm-extern-types::obj o::cvm) (-> |#!bigloo_wallow| o extern-types))
(define-inline (cvm-extern-types-set! o::cvm v::obj) (set! (-> |#!bigloo_wallow| o extern-types) v))
(define-inline (cvm-extern-functions::obj o::cvm) (-> |#!bigloo_wallow| o extern-functions))
(define-inline (cvm-extern-functions-set! o::cvm v::obj) (set! (-> |#!bigloo_wallow| o extern-functions) v))
(define-inline (cvm-extern-variables::obj o::cvm) (-> |#!bigloo_wallow| o extern-variables))
(define-inline (cvm-extern-variables-set! o::cvm v::obj) (set! (-> |#!bigloo_wallow| o extern-variables) v))
(define-inline (cvm-name::bstring o::cvm) (-> |#!bigloo_wallow| o name))
(define-inline (cvm-name-set! o::cvm v::bstring) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (cvm-srfi0::symbol o::cvm) (-> |#!bigloo_wallow| o srfi0))
(define-inline (cvm-srfi0-set! o::cvm v::symbol) (set! (-> |#!bigloo_wallow| o srfi0) v))
(define-inline (cvm-language::symbol o::cvm) (-> |#!bigloo_wallow| o language))
(define-inline (cvm-language-set! o::cvm v::symbol) (set! (-> |#!bigloo_wallow| o language) v))

;; sawc
(define-inline (make-sawc::sawc language1210::symbol srfi01211::symbol name1212::bstring extern-variables1213::obj extern-functions1214::obj extern-types1215::obj variables1216::obj functions1217::obj types1218::obj typed1219::bool heap-suffix1220::bstring heap-compatible1221::symbol callcc1222::bool qualified-types1223::bool effect+1224::bool remove-empty-let1225::bool foreign-closure1226::bool typed-eq1227::bool trace-support1228::bool foreign-clause-suppo1229::pair-nil debug-support1230::pair-nil pragma-support1231::bool tvector-descr-suppor1232::bool require-tailc1233::bool registers1234::pair-nil pregisters1235::pair-nil bound-check1236::bool type-check1237::bool typed-funcall1238::bool) (instantiate::sawc (language language1210) (srfi0 srfi01211) (name name1212) (extern-variables extern-variables1213) (extern-functions extern-functions1214) (extern-types extern-types1215) (variables variables1216) (functions functions1217) (types types1218) (typed typed1219) (heap-suffix heap-suffix1220) (heap-compatible heap-compatible1221) (callcc callcc1222) (qualified-types qualified-types1223) (effect+ effect+1224) (remove-empty-let remove-empty-let1225) (foreign-closure foreign-closure1226) (typed-eq typed-eq1227) (trace-support trace-support1228) (foreign-clause-support foreign-clause-suppo1229) (debug-support debug-support1230) (pragma-support pragma-support1231) (tvector-descr-support tvector-descr-suppor1232) (require-tailc require-tailc1233) (registers registers1234) (pregisters pregisters1235) (bound-check bound-check1236) (type-check type-check1237) (typed-funcall typed-funcall1238)))
(define-inline (sawc?::bool obj::obj) ((@ isa? __object) obj (@ sawc backend_cvm)))
(define (sawc-nil::sawc) (class-nil (@ sawc backend_cvm)))
(define-inline (sawc-typed-funcall::bool o::sawc) (-> |#!bigloo_wallow| o typed-funcall))
(define-inline (sawc-typed-funcall-set! o::sawc v::bool) (set! (-> |#!bigloo_wallow| o typed-funcall) v))
(define-inline (sawc-type-check::bool o::sawc) (-> |#!bigloo_wallow| o type-check))
(define-inline (sawc-type-check-set! o::sawc v::bool) (set! (-> |#!bigloo_wallow| o type-check) v))
(define-inline (sawc-bound-check::bool o::sawc) (-> |#!bigloo_wallow| o bound-check))
(define-inline (sawc-bound-check-set! o::sawc v::bool) (set! (-> |#!bigloo_wallow| o bound-check) v))
(define-inline (sawc-pregisters::pair-nil o::sawc) (-> |#!bigloo_wallow| o pregisters))
(define-inline (sawc-pregisters-set! o::sawc v::pair-nil) (set! (-> |#!bigloo_wallow| o pregisters) v))
(define-inline (sawc-registers::pair-nil o::sawc) (-> |#!bigloo_wallow| o registers))
(define-inline (sawc-registers-set! o::sawc v::pair-nil) (set! (-> |#!bigloo_wallow| o registers) v))
(define-inline (sawc-require-tailc::bool o::sawc) (-> |#!bigloo_wallow| o require-tailc))
(define-inline (sawc-require-tailc-set! o::sawc v::bool) (set! (-> |#!bigloo_wallow| o require-tailc) v))
(define-inline (sawc-tvector-descr-support::bool o::sawc) (-> |#!bigloo_wallow| o tvector-descr-support))
(define-inline (sawc-tvector-descr-support-set! o::sawc v::bool) (set! (-> |#!bigloo_wallow| o tvector-descr-support) v))
(define-inline (sawc-pragma-support::bool o::sawc) (-> |#!bigloo_wallow| o pragma-support))
(define-inline (sawc-pragma-support-set! o::sawc v::bool) (set! (-> |#!bigloo_wallow| o pragma-support) v))
(define-inline (sawc-debug-support::pair-nil o::sawc) (-> |#!bigloo_wallow| o debug-support))
(define-inline (sawc-debug-support-set! o::sawc v::pair-nil) (set! (-> |#!bigloo_wallow| o debug-support) v))
(define-inline (sawc-foreign-clause-support::pair-nil o::sawc) (-> |#!bigloo_wallow| o foreign-clause-support))
(define-inline (sawc-foreign-clause-support-set! o::sawc v::pair-nil) (set! (-> |#!bigloo_wallow| o foreign-clause-support) v))
(define-inline (sawc-trace-support::bool o::sawc) (-> |#!bigloo_wallow| o trace-support))
(define-inline (sawc-trace-support-set! o::sawc v::bool) (set! (-> |#!bigloo_wallow| o trace-support) v))
(define-inline (sawc-typed-eq::bool o::sawc) (-> |#!bigloo_wallow| o typed-eq))
(define-inline (sawc-typed-eq-set! o::sawc v::bool) (set! (-> |#!bigloo_wallow| o typed-eq) v))
(define-inline (sawc-foreign-closure::bool o::sawc) (-> |#!bigloo_wallow| o foreign-closure))
(define-inline (sawc-foreign-closure-set! o::sawc v::bool) (set! (-> |#!bigloo_wallow| o foreign-closure) v))
(define-inline (sawc-remove-empty-let::bool o::sawc) (-> |#!bigloo_wallow| o remove-empty-let))
(define-inline (sawc-remove-empty-let-set! o::sawc v::bool) (set! (-> |#!bigloo_wallow| o remove-empty-let) v))
(define-inline (sawc-effect+::bool o::sawc) (-> |#!bigloo_wallow| o effect+))
(define-inline (sawc-effect+-set! o::sawc v::bool) (set! (-> |#!bigloo_wallow| o effect+) v))
(define-inline (sawc-qualified-types::bool o::sawc) (-> |#!bigloo_wallow| o qualified-types))
(define-inline (sawc-qualified-types-set! o::sawc v::bool) (set! (-> |#!bigloo_wallow| o qualified-types) v))
(define-inline (sawc-callcc::bool o::sawc) (-> |#!bigloo_wallow| o callcc))
(define-inline (sawc-callcc-set! o::sawc v::bool) (set! (-> |#!bigloo_wallow| o callcc) v))
(define-inline (sawc-heap-compatible::symbol o::sawc) (-> |#!bigloo_wallow| o heap-compatible))
(define-inline (sawc-heap-compatible-set! o::sawc v::symbol) (set! (-> |#!bigloo_wallow| o heap-compatible) v))
(define-inline (sawc-heap-suffix::bstring o::sawc) (-> |#!bigloo_wallow| o heap-suffix))
(define-inline (sawc-heap-suffix-set! o::sawc v::bstring) (set! (-> |#!bigloo_wallow| o heap-suffix) v))
(define-inline (sawc-typed::bool o::sawc) (-> |#!bigloo_wallow| o typed))
(define-inline (sawc-typed-set! o::sawc v::bool) (set! (-> |#!bigloo_wallow| o typed) v))
(define-inline (sawc-types::obj o::sawc) (-> |#!bigloo_wallow| o types))
(define-inline (sawc-types-set! o::sawc v::obj) (set! (-> |#!bigloo_wallow| o types) v))
(define-inline (sawc-functions::obj o::sawc) (-> |#!bigloo_wallow| o functions))
(define-inline (sawc-functions-set! o::sawc v::obj) (set! (-> |#!bigloo_wallow| o functions) v))
(define-inline (sawc-variables::obj o::sawc) (-> |#!bigloo_wallow| o variables))
(define-inline (sawc-variables-set! o::sawc v::obj) (set! (-> |#!bigloo_wallow| o variables) v))
(define-inline (sawc-extern-types::obj o::sawc) (-> |#!bigloo_wallow| o extern-types))
(define-inline (sawc-extern-types-set! o::sawc v::obj) (set! (-> |#!bigloo_wallow| o extern-types) v))
(define-inline (sawc-extern-functions::obj o::sawc) (-> |#!bigloo_wallow| o extern-functions))
(define-inline (sawc-extern-functions-set! o::sawc v::obj) (set! (-> |#!bigloo_wallow| o extern-functions) v))
(define-inline (sawc-extern-variables::obj o::sawc) (-> |#!bigloo_wallow| o extern-variables))
(define-inline (sawc-extern-variables-set! o::sawc v::obj) (set! (-> |#!bigloo_wallow| o extern-variables) v))
(define-inline (sawc-name::bstring o::sawc) (-> |#!bigloo_wallow| o name))
(define-inline (sawc-name-set! o::sawc v::bstring) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (sawc-srfi0::symbol o::sawc) (-> |#!bigloo_wallow| o srfi0))
(define-inline (sawc-srfi0-set! o::sawc v::symbol) (set! (-> |#!bigloo_wallow| o srfi0) v))
(define-inline (sawc-language::symbol o::sawc) (-> |#!bigloo_wallow| o language))
(define-inline (sawc-language-set! o::sawc v::symbol) (set! (-> |#!bigloo_wallow| o language) v))

;; wasm
(define-inline (make-wasm::wasm language1180::symbol srfi01181::symbol name1182::bstring extern-variables1183::obj extern-functions1184::obj extern-types1185::obj variables1186::obj functions1187::obj types1188::obj typed1189::bool heap-suffix1190::bstring heap-compatible1191::symbol callcc1192::bool qualified-types1193::bool effect+1194::bool remove-empty-let1195::bool foreign-closure1196::bool typed-eq1197::bool trace-support1198::bool foreign-clause-suppo1199::pair-nil debug-support1200::pair-nil pragma-support1201::bool tvector-descr-suppor1202::bool require-tailc1203::bool registers1204::pair-nil pregisters1205::pair-nil bound-check1206::bool type-check1207::bool typed-funcall1208::bool) (instantiate::wasm (language language1180) (srfi0 srfi01181) (name name1182) (extern-variables extern-variables1183) (extern-functions extern-functions1184) (extern-types extern-types1185) (variables variables1186) (functions functions1187) (types types1188) (typed typed1189) (heap-suffix heap-suffix1190) (heap-compatible heap-compatible1191) (callcc callcc1192) (qualified-types qualified-types1193) (effect+ effect+1194) (remove-empty-let remove-empty-let1195) (foreign-closure foreign-closure1196) (typed-eq typed-eq1197) (trace-support trace-support1198) (foreign-clause-support foreign-clause-suppo1199) (debug-support debug-support1200) (pragma-support pragma-support1201) (tvector-descr-support tvector-descr-suppor1202) (require-tailc require-tailc1203) (registers registers1204) (pregisters pregisters1205) (bound-check bound-check1206) (type-check type-check1207) (typed-funcall typed-funcall1208)))
(define-inline (wasm?::bool obj::obj) ((@ isa? __object) obj (@ wasm backend_cvm)))
(define (wasm-nil::wasm) (class-nil (@ wasm backend_cvm)))
(define-inline (wasm-typed-funcall::bool o::wasm) (-> |#!bigloo_wallow| o typed-funcall))
(define-inline (wasm-typed-funcall-set! o::wasm v::bool) (set! (-> |#!bigloo_wallow| o typed-funcall) v))
(define-inline (wasm-type-check::bool o::wasm) (-> |#!bigloo_wallow| o type-check))
(define-inline (wasm-type-check-set! o::wasm v::bool) (set! (-> |#!bigloo_wallow| o type-check) v))
(define-inline (wasm-bound-check::bool o::wasm) (-> |#!bigloo_wallow| o bound-check))
(define-inline (wasm-bound-check-set! o::wasm v::bool) (set! (-> |#!bigloo_wallow| o bound-check) v))
(define-inline (wasm-pregisters::pair-nil o::wasm) (-> |#!bigloo_wallow| o pregisters))
(define-inline (wasm-pregisters-set! o::wasm v::pair-nil) (set! (-> |#!bigloo_wallow| o pregisters) v))
(define-inline (wasm-registers::pair-nil o::wasm) (-> |#!bigloo_wallow| o registers))
(define-inline (wasm-registers-set! o::wasm v::pair-nil) (set! (-> |#!bigloo_wallow| o registers) v))
(define-inline (wasm-require-tailc::bool o::wasm) (-> |#!bigloo_wallow| o require-tailc))
(define-inline (wasm-require-tailc-set! o::wasm v::bool) (set! (-> |#!bigloo_wallow| o require-tailc) v))
(define-inline (wasm-tvector-descr-support::bool o::wasm) (-> |#!bigloo_wallow| o tvector-descr-support))
(define-inline (wasm-tvector-descr-support-set! o::wasm v::bool) (set! (-> |#!bigloo_wallow| o tvector-descr-support) v))
(define-inline (wasm-pragma-support::bool o::wasm) (-> |#!bigloo_wallow| o pragma-support))
(define-inline (wasm-pragma-support-set! o::wasm v::bool) (set! (-> |#!bigloo_wallow| o pragma-support) v))
(define-inline (wasm-debug-support::pair-nil o::wasm) (-> |#!bigloo_wallow| o debug-support))
(define-inline (wasm-debug-support-set! o::wasm v::pair-nil) (set! (-> |#!bigloo_wallow| o debug-support) v))
(define-inline (wasm-foreign-clause-support::pair-nil o::wasm) (-> |#!bigloo_wallow| o foreign-clause-support))
(define-inline (wasm-foreign-clause-support-set! o::wasm v::pair-nil) (set! (-> |#!bigloo_wallow| o foreign-clause-support) v))
(define-inline (wasm-trace-support::bool o::wasm) (-> |#!bigloo_wallow| o trace-support))
(define-inline (wasm-trace-support-set! o::wasm v::bool) (set! (-> |#!bigloo_wallow| o trace-support) v))
(define-inline (wasm-typed-eq::bool o::wasm) (-> |#!bigloo_wallow| o typed-eq))
(define-inline (wasm-typed-eq-set! o::wasm v::bool) (set! (-> |#!bigloo_wallow| o typed-eq) v))
(define-inline (wasm-foreign-closure::bool o::wasm) (-> |#!bigloo_wallow| o foreign-closure))
(define-inline (wasm-foreign-closure-set! o::wasm v::bool) (set! (-> |#!bigloo_wallow| o foreign-closure) v))
(define-inline (wasm-remove-empty-let::bool o::wasm) (-> |#!bigloo_wallow| o remove-empty-let))
(define-inline (wasm-remove-empty-let-set! o::wasm v::bool) (set! (-> |#!bigloo_wallow| o remove-empty-let) v))
(define-inline (wasm-effect+::bool o::wasm) (-> |#!bigloo_wallow| o effect+))
(define-inline (wasm-effect+-set! o::wasm v::bool) (set! (-> |#!bigloo_wallow| o effect+) v))
(define-inline (wasm-qualified-types::bool o::wasm) (-> |#!bigloo_wallow| o qualified-types))
(define-inline (wasm-qualified-types-set! o::wasm v::bool) (set! (-> |#!bigloo_wallow| o qualified-types) v))
(define-inline (wasm-callcc::bool o::wasm) (-> |#!bigloo_wallow| o callcc))
(define-inline (wasm-callcc-set! o::wasm v::bool) (set! (-> |#!bigloo_wallow| o callcc) v))
(define-inline (wasm-heap-compatible::symbol o::wasm) (-> |#!bigloo_wallow| o heap-compatible))
(define-inline (wasm-heap-compatible-set! o::wasm v::symbol) (set! (-> |#!bigloo_wallow| o heap-compatible) v))
(define-inline (wasm-heap-suffix::bstring o::wasm) (-> |#!bigloo_wallow| o heap-suffix))
(define-inline (wasm-heap-suffix-set! o::wasm v::bstring) (set! (-> |#!bigloo_wallow| o heap-suffix) v))
(define-inline (wasm-typed::bool o::wasm) (-> |#!bigloo_wallow| o typed))
(define-inline (wasm-typed-set! o::wasm v::bool) (set! (-> |#!bigloo_wallow| o typed) v))
(define-inline (wasm-types::obj o::wasm) (-> |#!bigloo_wallow| o types))
(define-inline (wasm-types-set! o::wasm v::obj) (set! (-> |#!bigloo_wallow| o types) v))
(define-inline (wasm-functions::obj o::wasm) (-> |#!bigloo_wallow| o functions))
(define-inline (wasm-functions-set! o::wasm v::obj) (set! (-> |#!bigloo_wallow| o functions) v))
(define-inline (wasm-variables::obj o::wasm) (-> |#!bigloo_wallow| o variables))
(define-inline (wasm-variables-set! o::wasm v::obj) (set! (-> |#!bigloo_wallow| o variables) v))
(define-inline (wasm-extern-types::obj o::wasm) (-> |#!bigloo_wallow| o extern-types))
(define-inline (wasm-extern-types-set! o::wasm v::obj) (set! (-> |#!bigloo_wallow| o extern-types) v))
(define-inline (wasm-extern-functions::obj o::wasm) (-> |#!bigloo_wallow| o extern-functions))
(define-inline (wasm-extern-functions-set! o::wasm v::obj) (set! (-> |#!bigloo_wallow| o extern-functions) v))
(define-inline (wasm-extern-variables::obj o::wasm) (-> |#!bigloo_wallow| o extern-variables))
(define-inline (wasm-extern-variables-set! o::wasm v::obj) (set! (-> |#!bigloo_wallow| o extern-variables) v))
(define-inline (wasm-name::bstring o::wasm) (-> |#!bigloo_wallow| o name))
(define-inline (wasm-name-set! o::wasm v::bstring) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (wasm-srfi0::symbol o::wasm) (-> |#!bigloo_wallow| o srfi0))
(define-inline (wasm-srfi0-set! o::wasm v::symbol) (set! (-> |#!bigloo_wallow| o srfi0) v))
(define-inline (wasm-language::symbol o::wasm) (-> |#!bigloo_wallow| o language))
(define-inline (wasm-language-set! o::wasm v::symbol) (set! (-> |#!bigloo_wallow| o language) v))

;; cgen
(define-inline (make-cgen::cgen language1150::symbol srfi01151::symbol name1152::bstring extern-variables1153::obj extern-functions1154::obj extern-types1155::obj variables1156::obj functions1157::obj types1158::obj typed1159::bool heap-suffix1160::bstring heap-compatible1161::symbol callcc1162::bool qualified-types1163::bool effect+1164::bool remove-empty-let1165::bool foreign-closure1166::bool typed-eq1167::bool trace-support1168::bool foreign-clause-suppo1169::pair-nil debug-support1170::pair-nil pragma-support1171::bool tvector-descr-suppor1172::bool require-tailc1173::bool registers1174::pair-nil pregisters1175::pair-nil bound-check1176::bool type-check1177::bool typed-funcall1178::bool) (instantiate::cgen (language language1150) (srfi0 srfi01151) (name name1152) (extern-variables extern-variables1153) (extern-functions extern-functions1154) (extern-types extern-types1155) (variables variables1156) (functions functions1157) (types types1158) (typed typed1159) (heap-suffix heap-suffix1160) (heap-compatible heap-compatible1161) (callcc callcc1162) (qualified-types qualified-types1163) (effect+ effect+1164) (remove-empty-let remove-empty-let1165) (foreign-closure foreign-closure1166) (typed-eq typed-eq1167) (trace-support trace-support1168) (foreign-clause-support foreign-clause-suppo1169) (debug-support debug-support1170) (pragma-support pragma-support1171) (tvector-descr-support tvector-descr-suppor1172) (require-tailc require-tailc1173) (registers registers1174) (pregisters pregisters1175) (bound-check bound-check1176) (type-check type-check1177) (typed-funcall typed-funcall1178)))
(define-inline (cgen?::bool obj::obj) ((@ isa? __object) obj (@ cgen backend_cvm)))
(define (cgen-nil::cgen) (class-nil (@ cgen backend_cvm)))
(define-inline (cgen-typed-funcall::bool o::cgen) (-> |#!bigloo_wallow| o typed-funcall))
(define-inline (cgen-typed-funcall-set! o::cgen v::bool) (set! (-> |#!bigloo_wallow| o typed-funcall) v))
(define-inline (cgen-type-check::bool o::cgen) (-> |#!bigloo_wallow| o type-check))
(define-inline (cgen-type-check-set! o::cgen v::bool) (set! (-> |#!bigloo_wallow| o type-check) v))
(define-inline (cgen-bound-check::bool o::cgen) (-> |#!bigloo_wallow| o bound-check))
(define-inline (cgen-bound-check-set! o::cgen v::bool) (set! (-> |#!bigloo_wallow| o bound-check) v))
(define-inline (cgen-pregisters::pair-nil o::cgen) (-> |#!bigloo_wallow| o pregisters))
(define-inline (cgen-pregisters-set! o::cgen v::pair-nil) (set! (-> |#!bigloo_wallow| o pregisters) v))
(define-inline (cgen-registers::pair-nil o::cgen) (-> |#!bigloo_wallow| o registers))
(define-inline (cgen-registers-set! o::cgen v::pair-nil) (set! (-> |#!bigloo_wallow| o registers) v))
(define-inline (cgen-require-tailc::bool o::cgen) (-> |#!bigloo_wallow| o require-tailc))
(define-inline (cgen-require-tailc-set! o::cgen v::bool) (set! (-> |#!bigloo_wallow| o require-tailc) v))
(define-inline (cgen-tvector-descr-support::bool o::cgen) (-> |#!bigloo_wallow| o tvector-descr-support))
(define-inline (cgen-tvector-descr-support-set! o::cgen v::bool) (set! (-> |#!bigloo_wallow| o tvector-descr-support) v))
(define-inline (cgen-pragma-support::bool o::cgen) (-> |#!bigloo_wallow| o pragma-support))
(define-inline (cgen-pragma-support-set! o::cgen v::bool) (set! (-> |#!bigloo_wallow| o pragma-support) v))
(define-inline (cgen-debug-support::pair-nil o::cgen) (-> |#!bigloo_wallow| o debug-support))
(define-inline (cgen-debug-support-set! o::cgen v::pair-nil) (set! (-> |#!bigloo_wallow| o debug-support) v))
(define-inline (cgen-foreign-clause-support::pair-nil o::cgen) (-> |#!bigloo_wallow| o foreign-clause-support))
(define-inline (cgen-foreign-clause-support-set! o::cgen v::pair-nil) (set! (-> |#!bigloo_wallow| o foreign-clause-support) v))
(define-inline (cgen-trace-support::bool o::cgen) (-> |#!bigloo_wallow| o trace-support))
(define-inline (cgen-trace-support-set! o::cgen v::bool) (set! (-> |#!bigloo_wallow| o trace-support) v))
(define-inline (cgen-typed-eq::bool o::cgen) (-> |#!bigloo_wallow| o typed-eq))
(define-inline (cgen-typed-eq-set! o::cgen v::bool) (set! (-> |#!bigloo_wallow| o typed-eq) v))
(define-inline (cgen-foreign-closure::bool o::cgen) (-> |#!bigloo_wallow| o foreign-closure))
(define-inline (cgen-foreign-closure-set! o::cgen v::bool) (set! (-> |#!bigloo_wallow| o foreign-closure) v))
(define-inline (cgen-remove-empty-let::bool o::cgen) (-> |#!bigloo_wallow| o remove-empty-let))
(define-inline (cgen-remove-empty-let-set! o::cgen v::bool) (set! (-> |#!bigloo_wallow| o remove-empty-let) v))
(define-inline (cgen-effect+::bool o::cgen) (-> |#!bigloo_wallow| o effect+))
(define-inline (cgen-effect+-set! o::cgen v::bool) (set! (-> |#!bigloo_wallow| o effect+) v))
(define-inline (cgen-qualified-types::bool o::cgen) (-> |#!bigloo_wallow| o qualified-types))
(define-inline (cgen-qualified-types-set! o::cgen v::bool) (set! (-> |#!bigloo_wallow| o qualified-types) v))
(define-inline (cgen-callcc::bool o::cgen) (-> |#!bigloo_wallow| o callcc))
(define-inline (cgen-callcc-set! o::cgen v::bool) (set! (-> |#!bigloo_wallow| o callcc) v))
(define-inline (cgen-heap-compatible::symbol o::cgen) (-> |#!bigloo_wallow| o heap-compatible))
(define-inline (cgen-heap-compatible-set! o::cgen v::symbol) (set! (-> |#!bigloo_wallow| o heap-compatible) v))
(define-inline (cgen-heap-suffix::bstring o::cgen) (-> |#!bigloo_wallow| o heap-suffix))
(define-inline (cgen-heap-suffix-set! o::cgen v::bstring) (set! (-> |#!bigloo_wallow| o heap-suffix) v))
(define-inline (cgen-typed::bool o::cgen) (-> |#!bigloo_wallow| o typed))
(define-inline (cgen-typed-set! o::cgen v::bool) (set! (-> |#!bigloo_wallow| o typed) v))
(define-inline (cgen-types::obj o::cgen) (-> |#!bigloo_wallow| o types))
(define-inline (cgen-types-set! o::cgen v::obj) (set! (-> |#!bigloo_wallow| o types) v))
(define-inline (cgen-functions::obj o::cgen) (-> |#!bigloo_wallow| o functions))
(define-inline (cgen-functions-set! o::cgen v::obj) (set! (-> |#!bigloo_wallow| o functions) v))
(define-inline (cgen-variables::obj o::cgen) (-> |#!bigloo_wallow| o variables))
(define-inline (cgen-variables-set! o::cgen v::obj) (set! (-> |#!bigloo_wallow| o variables) v))
(define-inline (cgen-extern-types::obj o::cgen) (-> |#!bigloo_wallow| o extern-types))
(define-inline (cgen-extern-types-set! o::cgen v::obj) (set! (-> |#!bigloo_wallow| o extern-types) v))
(define-inline (cgen-extern-functions::obj o::cgen) (-> |#!bigloo_wallow| o extern-functions))
(define-inline (cgen-extern-functions-set! o::cgen v::obj) (set! (-> |#!bigloo_wallow| o extern-functions) v))
(define-inline (cgen-extern-variables::obj o::cgen) (-> |#!bigloo_wallow| o extern-variables))
(define-inline (cgen-extern-variables-set! o::cgen v::obj) (set! (-> |#!bigloo_wallow| o extern-variables) v))
(define-inline (cgen-name::bstring o::cgen) (-> |#!bigloo_wallow| o name))
(define-inline (cgen-name-set! o::cgen v::bstring) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (cgen-srfi0::symbol o::cgen) (-> |#!bigloo_wallow| o srfi0))
(define-inline (cgen-srfi0-set! o::cgen v::symbol) (set! (-> |#!bigloo_wallow| o srfi0) v))
(define-inline (cgen-language::symbol o::cgen) (-> |#!bigloo_wallow| o language))
(define-inline (cgen-language-set! o::cgen v::symbol) (set! (-> |#!bigloo_wallow| o language) v))
))
